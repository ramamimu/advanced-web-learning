/* eslint-disable react/no-unknown-property */
/* eslint-disable react-hooks/exhaustive-deps */
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useRef } from "react";
import { useSelector, useDispatch } from "react-redux";
import { increment, decrement, addBy } from "../store/counter-slice";
import { Spinner } from "flowbite-react";
import { db, auth } from "../firebase.config";
import { collection, getDocs, updateDoc, doc, addDoc } from "firebase/firestore";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
} from "firebase/auth";

export default function Home() {
  const count = useSelector((state) => state.counter);
  const [isLoading, setIsLoading] = useState(true);
  const [isActive, setIsActive] = useState(false);
  const [fetchData, setFetchData] = useState({});
  const refCollectionFirebase = collection(db, "datas");
  const [dbFirebase, setDbFirebase] = useState([]);
  const [fireLoading, setFireLoading] = useState(false);

  const dispatch = useDispatch();

  const inputEmail = useRef(null);
  const inputPassword = useRef(null);
  const [currentUsers, setCurrentUsers] = useState("");

  // FIREBASE AUTHENTIFICATION
  onAuthStateChanged(auth, (currentUser) => {
    setCurrentUsers(currentUser?.email);
  });

  const login = async (e) => {
    try {
      const email = inputEmail.current.value;
      const password = inputPassword.current.value;
      await signInWithEmailAndPassword(auth, email, password);
      inputEmail.current.value = "";
      inputPassword.current.value = "";
      console.log("success login to account");
    } catch (e) {
      console.log(e);
    }
  };

  const register = async () => {
    try {
      const email = inputEmail.current.value;
      const password = inputPassword.current.value;
      await createUserWithEmailAndPassword(auth, email, password);
      inputEmail.current.value = "";
      inputPassword.current.value = "";
      console.log("success create account");
    } catch (e) {
      console.log(e);
    }
  };
  const logOut = async () => {
    try {
      await signOut(auth);
      console.log("log out success");
    } catch (e) {
      console.log("log out fail ", e);
    }
  };

  // FIRESTORE
  const addFirestoreData = async (x, y) => {
    try {
      await addDoc(refCollectionFirebase, { x: x, y: y });
      console.log("firestore data added successfully");
    } catch (e) {
      console.error("Error adding firestore data", e);
    }
  };

  const fetchFirestore = async () => {
    setFireLoading(true);
    const data = await getDocs(refCollectionFirebase);
    setFireLoading(false);
    setDbFirebase(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
  };

  const fetchApi = () => {
    setIsLoading(true);
    fetch("https://reqres.in/api/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name: "morpheus",
        job: "leader",
      }),
    })
      .then((res) => {
        setIsLoading(false);
        return res.json();
      })
      .then((data) => {
        setFetchData({ ...data });
      });
  };

  useEffect(() => {
    fetchApi();
    fetchFirestore();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-green-500 min-h-[110vh]">
        <h1 className="text-3xl">Belajar FIREBASE</h1>
        {/* firebase authentication */}
        <button
          onClick={() => logOut()}
          type="submit"
          className="p-2 block bg-white mt-2 text-black"
        >
          sign out
        </button>
        <h3>User Login: {currentUsers}</h3>
        <h2 className="text-2xl">Authentification</h2>
        <form
          className="m-3"
          onSubmit={(e) => {
            e.preventDefault();
          }}
        >
          <p>Email</p>
          <input ref={inputEmail} type="text" name="email" placeholder="Email" required />
          <p>Password</p>
          <input
            ref={inputPassword}
            type="password"
            name="password"
            placeholder="Password"
            required
          />
          <button
            onClick={() => login()}
            type="submit"
            className="p-2 block bg-white mt-2 text-black"
          >
            Login
          </button>
          <button onClick={() => register()} type="submit" className="p-2 bg-white text-black mt-2">
            Sign Up
          </button>
        </form>
        {/* firestore */}
        <h2 className="text-2xl">Firestore</h2>
        <button
          onClick={() => {
            addFirestoreData(Math.random(), Math.random());
          }}
          className="p-2 bg-white text-black mt-2"
        >
          Add Random data
        </button>{" "}
        <br />
        <button
          onClick={() => {
            fetchFirestore();
          }}
          className="p-2 bg-white text-black mt-2"
        >
          Fetch data
        </button>
        {fireLoading ? (
          <div>
            <br />
            <Spinner />
          </div>
        ) : (
          dbFirebase.map((data) => (
            <div key={data.id}>
              <h3>Same Root</h3>
              <p>id: {data.id}</p>
              <p>x: {data.x}</p>
              <p>y: {data.y}</p>
            </div>
          ))
        )}
        <h1 className="text-3xl">Belajar Fetch API, toast, dan fluently useEffect</h1>
        <div role="status"></div>
        <button
          className="p-2 bg-white"
          onClick={() => {
            fetchApi();
          }}
        >
          {isLoading ? <Spinner /> : "Fetch API"}
        </button>
        {isLoading ? (
          <h1>text loading ...</h1>
        ) : (
          <h1>
            {fetchData.name} {fetchData.job} {fetchData.id} {fetchData.createdAt}
          </h1>
        )}
        <h1 className="text-3xl">Belajar Redux</h1>
        <p>result increment = {count}</p>
        <button
          onClick={() => {
            dispatch(increment());
          }}
        >
          increment
        </button>
        <br />
        <button
          onClick={() => {
            dispatch(decrement());
          }}
        >
          decrement
        </button>
        <br />
        <button
          onClick={() => {
            dispatch(addBy(10));
          }}
        >
          decrement 10
        </button>
        {/* fixed button */}
        <div
          className={`flex flex-row-reverse fixed right-8 bottom-5 transition-all duration-500 items-center overflow-hidden ${
            isActive ? "-translate-y-36" : ""
          }`}
        >
          <div className={`opacity-0 transition-all duration-500 ${isActive ? "opacity-100" : ""}`}>
            <Image src="/whatsapp.svg" width={100} height={100} alt="whatsapp" />
          </div>
          <div
            className={`relative bottom-2 rounded-xl py-2 px-4 transition-all duration-300 delay-200 bg-white  ${
              isActive ? "translate-x-0" : "-translate-x-40"
            }`}
          >
            <p className="">Hubungi Kami</p>
          </div>
        </div>
        <div
          className={`fixed right-8 bottom-5 flex flex-row-reverse transition-all duration-500 items-center overflow-hidden ${
            isActive ? "translate-y-[-72px] " : ""
          }`}
        >
          <div className={`opacity-0 transition-all duration-500 ${isActive ? "opacity-100" : ""}`}>
            <Image src="/news.svg" width={100} height={100} alt="news" className="" />
          </div>
          <div
            className={`relative bottom-2 rounded-xl py-2 px-4 transition-all duration-300 delay-200 bg-white -z-10 ${
              isActive ? "translate-x-0" : "-translate-x-40"
            }`}
          >
            <p className="items-center bg-white">Berlangganan</p>
          </div>
        </div>
        <div></div>
        <div
          className={`fixed right-8 bottom-5 transition-all duration-300 ${
            isActive ? "" : "opacity-0"
          }`}
        >
          <Image src="/close.svg" width={100} height={100} alt="close" className="" />
        </div>
        <div
          onClick={() => {
            setIsActive(!isActive);
          }}
          className={`fixed right-5 bottom-5 transition-all duration-300 ${
            isActive ? "opacity-0" : ""
          }`}
        >
          <div></div>
          <Image
            src="/whatsapp-news.svg"
            width={130}
            height={130}
            alt="whatsapp-news"
            className=""
          />
        </div>
      </main>
    </div>
  );
}
